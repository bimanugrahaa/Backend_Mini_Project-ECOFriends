// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	donation "Backend_Mini_Project-ECOFriends/features/donation"

	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: id, data
func (_m *Bussiness) CreateComment(id int, data donation.CommentCore) (donation.CommentCore, error) {
	ret := _m.Called(id, data)

	var r0 donation.CommentCore
	if rf, ok := ret.Get(0).(func(int, donation.CommentCore) donation.CommentCore); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(donation.CommentCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, donation.CommentCore) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDonation provides a mock function with given fields: data
func (_m *Bussiness) CreateDonation(data donation.Core) (donation.Core, error) {
	ret := _m.Called(data)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(donation.Core) donation.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: data
func (_m *Bussiness) DeleteComment(data donation.CommentCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(donation.CommentCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDonationsById provides a mock function with given fields: data
func (_m *Bussiness) DeleteDonationsById(data donation.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(donation.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDonations provides a mock function with given fields:
func (_m *Bussiness) GetAllDonations() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}

// GetCommentByPostId provides a mock function with given fields: id
func (_m *Bussiness) GetCommentByPostId(id int) ([]donation.CommentCore, error) {
	ret := _m.Called(id)

	var r0 []donation.CommentCore
	if rf, ok := ret.Get(0).(func(int) []donation.CommentCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.CommentCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDonationLatest provides a mock function with given fields:
func (_m *Bussiness) GetDonationLatest() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}

// GetDonationTrending provides a mock function with given fields:
func (_m *Bussiness) GetDonationTrending() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}

// GetDonationsById provides a mock function with given fields: id
func (_m *Bussiness) GetDonationsById(id int) donation.Core {
	ret := _m.Called(id)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(int) donation.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: data
func (_m *Bussiness) UpdateComment(data donation.CommentCore) (donation.CommentCore, error) {
	ret := _m.Called(data)

	var r0 donation.CommentCore
	if rf, ok := ret.Get(0).(func(donation.CommentCore) donation.CommentCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.CommentCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.CommentCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDonation provides a mock function with given fields: data
func (_m *Bussiness) UpdateDonation(data donation.Core) (donation.Core, error) {
	ret := _m.Called(data)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(donation.Core) donation.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDonationValue provides a mock function with given fields: data
func (_m *Bussiness) UpdateDonationValue(data donation.DescriptionCore) (donation.DescriptionCore, error) {
	ret := _m.Called(data)

	var r0 donation.DescriptionCore
	if rf, ok := ret.Get(0).(func(donation.DescriptionCore) donation.DescriptionCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.DescriptionCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.DescriptionCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

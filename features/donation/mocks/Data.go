// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	donation "Backend_Mini_Project-ECOFriends/features/donation"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// EditComment provides a mock function with given fields: data
func (_m *Data) EditComment(data donation.CommentCore) (donation.CommentCore, error) {
	ret := _m.Called(data)

	var r0 donation.CommentCore
	if rf, ok := ret.Get(0).(func(donation.CommentCore) donation.CommentCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.CommentCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.CommentCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditDonation provides a mock function with given fields: data
func (_m *Data) EditDonation(data donation.Core) (donation.Core, error) {
	ret := _m.Called(data)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(donation.Core) donation.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditDonationValue provides a mock function with given fields: data
func (_m *Data) EditDonationValue(data donation.DescriptionCore) (donation.DescriptionCore, error) {
	ret := _m.Called(data)

	var r0 donation.DescriptionCore
	if rf, ok := ret.Get(0).(func(donation.DescriptionCore) donation.DescriptionCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.DescriptionCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.DescriptionCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertComment provides a mock function with given fields: id, data
func (_m *Data) InsertComment(id int, data donation.CommentCore) (donation.CommentCore, error) {
	ret := _m.Called(id, data)

	var r0 donation.CommentCore
	if rf, ok := ret.Get(0).(func(int, donation.CommentCore) donation.CommentCore); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(donation.CommentCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, donation.CommentCore) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDonation provides a mock function with given fields: data
func (_m *Data) InsertDonation(data donation.Core) (donation.Core, error) {
	ret := _m.Called(data)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(donation.Core) donation.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(donation.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveComment provides a mock function with given fields: data
func (_m *Data) RemoveComment(data donation.CommentCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(donation.CommentCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDonationsById provides a mock function with given fields: data
func (_m *Data) RemoveDonationsById(data donation.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(donation.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllDonations provides a mock function with given fields:
func (_m *Data) SelectAllDonations() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}

// SelectCommentById provides a mock function with given fields: id
func (_m *Data) SelectCommentById(id int) (donation.CommentCore, error) {
	ret := _m.Called(id)

	var r0 donation.CommentCore
	if rf, ok := ret.Get(0).(func(int) donation.CommentCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(donation.CommentCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCommentByPostId provides a mock function with given fields: id
func (_m *Data) SelectCommentByPostId(id int) ([]donation.CommentCore, error) {
	ret := _m.Called(id)

	var r0 []donation.CommentCore
	if rf, ok := ret.Get(0).(func(int) []donation.CommentCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.CommentCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDonationsById provides a mock function with given fields: id
func (_m *Data) SelectDonationsById(id int) donation.Core {
	ret := _m.Called(id)

	var r0 donation.Core
	if rf, ok := ret.Get(0).(func(int) donation.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(donation.Core)
	}

	return r0
}

// SelectDonationsLatest provides a mock function with given fields:
func (_m *Data) SelectDonationsLatest() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}

// SelectDonationsTrending provides a mock function with given fields:
func (_m *Data) SelectDonationsTrending() []donation.Core {
	ret := _m.Called()

	var r0 []donation.Core
	if rf, ok := ret.Get(0).(func() []donation.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donation.Core)
		}
	}

	return r0
}
